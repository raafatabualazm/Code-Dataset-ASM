{
  "file": "yin-and-yang-1.dart",
  "functions": [
    {
      "name": "main",
      "source": "int main() {\n  yinYang(18);\n  return 0;\n}",
      "assembly": "Dump of assembler code for function main:\n   0x0000000000090b00 <+0>:\tpush   rbp\n   0x0000000000090b01 <+1>:\tmov    rbp,rsp\n   0x0000000000090b04 <+4>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x0000000000090b08 <+8>:\tjbe    0x90b1a <main+26>\n   0x0000000000090b0e <+14>:\tcall   0x90b24 <yinYang>\n   0x0000000000090b13 <+19>:\txor    eax,eax\n   0x0000000000090b15 <+21>:\tmov    rsp,rbp\n   0x0000000000090b18 <+24>:\tpop    rbp\n   0x0000000000090b19 <+25>:\tret\n   0x0000000000090b1a <+26>:\tcall   QWORD PTR [r14+0x230]\n   0x0000000000090b21 <+33>:\tjmp    0x90b0e <main+14>\nEnd of assembler dump.\n"
    },
    {
      "name": "pixel",
      "source": "String pixel(int x, int y, int r) {\n  if (circle(x, y, -r ~/ 2, r ~/ 6)) {\n    return '#';\n  }\n  if (circle(x, y, r ~/ 2, r ~/ 6)) {\n    return '.';\n  }\n  if (circle(x, y, -r ~/ 2, r ~/ 2)) {\n    return '.';\n  }\n  if (circle(x, y, r ~/ 2, r ~/ 2)) {\n    return '#';\n  }\n  if (circle(x, y, 0, r)) {\n    if (x < 0) {\n      return '.';\n    } else {\n      return '#';\n    }\n  }\n  return ' ';\n}",
      "assembly": "Dump of assembler code for function pixel:\n   0x0000000000091160 <+0>:\tpush   rbp\n   0x0000000000091161 <+1>:\tmov    rbp,rsp\n   0x0000000000091164 <+4>:\tmov    ecx,0x2\n   0x0000000000091169 <+9>:\tmov    rax,rdi\n   0x000000000009116c <+12>:\tmov    r11,rax\n   0x000000000009116f <+15>:\tmov    rax,QWORD PTR [r15+0x607]\n   0x0000000000091176 <+22>:\timul   r11\n   0x0000000000091179 <+25>:\tadd    rdx,r11\n   0x000000000009117c <+28>:\tmov    rax,rdx\n   0x000000000009117f <+31>:\tshr    rdx,0x3f\n   0x0000000000091183 <+35>:\tadd    rdx,rax\n   0x0000000000091186 <+38>:\tmov    rax,rdx\n   0x0000000000091189 <+41>:\tmov    rcx,rax\n   0x000000000009118c <+44>:\timul   rcx,rax\n   0x0000000000091190 <+48>:\tmov    rdx,rsi\n   0x0000000000091193 <+51>:\tsub    rdx,0xfffffffffffffff7\n   0x0000000000091197 <+55>:\tmov    rbx,rdx\n   0x000000000009119a <+58>:\timul   rbx,rdx\n   0x000000000009119e <+62>:\tadd    rbx,rcx\n   0x00000000000911a1 <+65>:\tcmp    rbx,0x9\n   0x00000000000911a5 <+69>:\tjg     0x911b7 <pixel+87>\n   0x00000000000911ab <+75>:\tmov    rax,QWORD PTR [r15+0x1aa7]\n   0x00000000000911b2 <+82>:\tmov    rsp,rbp\n   0x00000000000911b5 <+85>:\tpop    rbp\n   0x00000000000911b6 <+86>:\tret\n   0x00000000000911b7 <+87>:\tmov    rdx,rsi\n   0x00000000000911ba <+90>:\tsub    rdx,0x9\n   0x00000000000911be <+94>:\tmov    r8,rdx\n   0x00000000000911c1 <+97>:\timul   r8,rdx\n   0x00000000000911c5 <+101>:\tadd    r8,rcx\n   0x00000000000911c8 <+104>:\tcmp    r8,0x9\n   0x00000000000911cc <+108>:\tjg     0x911de <pixel+126>\n   0x00000000000911d2 <+114>:\tmov    rax,QWORD PTR [r15+0xbf]\n   0x00000000000911d9 <+121>:\tmov    rsp,rbp\n   0x00000000000911dc <+124>:\tpop    rbp\n   0x00000000000911dd <+125>:\tret\n   0x00000000000911de <+126>:\tcmp    rbx,0x51\n   0x00000000000911e2 <+130>:\tjg     0x911f4 <pixel+148>\n   0x00000000000911e8 <+136>:\tmov    rax,QWORD PTR [r15+0xbf]\n   0x00000000000911ef <+143>:\tmov    rsp,rbp\n   0x00000000000911f2 <+146>:\tpop    rbp\n   0x00000000000911f3 <+147>:\tret\n   0x00000000000911f4 <+148>:\tcmp    r8,0x51\n   0x00000000000911f8 <+152>:\tjg     0x9120a <pixel+170>\n   0x00000000000911fe <+158>:\tmov    rax,QWORD PTR [r15+0x1aa7]\n   0x0000000000091205 <+165>:\tmov    rsp,rbp\n   0x0000000000091208 <+168>:\tpop    rbp\n   0x0000000000091209 <+169>:\tret\n   0x000000000009120a <+170>:\tmov    rdx,rsi\n   0x000000000009120d <+173>:\timul   rdx,rsi\n   0x0000000000091211 <+177>:\tadd    rcx,rdx\n   0x0000000000091214 <+180>:\tcmp    rcx,0x144\n   0x000000000009121b <+187>:\tjg     0x91243 <pixel+227>\n   0x0000000000091221 <+193>:\tcmp    rdi,0x0\n   0x0000000000091225 <+197>:\tjge    0x91237 <pixel+215>\n   0x000000000009122b <+203>:\tmov    rax,QWORD PTR [r15+0xbf]\n   0x0000000000091232 <+210>:\tmov    rsp,rbp\n   0x0000000000091235 <+213>:\tpop    rbp\n   0x0000000000091236 <+214>:\tret\n   0x0000000000091237 <+215>:\tmov    rax,QWORD PTR [r15+0x1aa7]\n   0x000000000009123e <+222>:\tmov    rsp,rbp\n   0x0000000000091241 <+225>:\tpop    rbp\n   0x0000000000091242 <+226>:\tret\n   0x0000000000091243 <+227>:\tmov    rax,QWORD PTR [r15+0x5df]\n   0x000000000009124a <+234>:\tmov    rsp,rbp\n   0x000000000009124d <+237>:\tpop    rbp\n   0x000000000009124e <+238>:\tret\nEnd of assembler dump.\n"
    },
    {
      "name": "yinYang",
      "source": "void yinYang(int r) {\n  for (int y = -r; y <= r; y++) {\n    for (int x = -2 * r; x <= 2 * r; x++) {\n      stdout.write(pixel(x, y, r));\n    }\n    stdout.write('\\n');\n  }\n}",
      "assembly": "Dump of assembler code for function yinYang:\n   0x0000000000090b24 <+0>:\tpush   rbp\n   0x0000000000090b25 <+1>:\tmov    rbp,rsp\n   0x0000000000090b28 <+4>:\tsub    rsp,0x18\n   0x0000000000090b2c <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x0000000000090b30 <+12>:\tjbe    0x90c93 <yinYang+367>\n   0x0000000000090b36 <+18>:\tmov    rsi,0xffffffffffffffee\n   0x0000000000090b3d <+25>:\tmov    QWORD PTR [rbp-0x10],rsi\n   0x0000000000090b41 <+29>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x0000000000090b45 <+33>:\tjbe    0x90c9f <yinYang+379>\n   0x0000000000090b4b <+39>:\tcmp    rsi,0x12\n   0x0000000000090b4f <+43>:\tjg     0x90c8a <yinYang+358>\n   0x0000000000090b55 <+49>:\tmov    rdi,0xffffffffffffffdc\n   0x0000000000090b5c <+56>:\tmov    QWORD PTR [rbp-0x8],rdi\n   0x0000000000090b60 <+60>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x0000000000090b64 <+64>:\tjbe    0x90cab <yinYang+391>\n   0x0000000000090b6a <+70>:\tcmp    rdi,0x24\n   0x0000000000090b6e <+74>:\tjg     0x90c08 <yinYang+228>\n   0x0000000000090b74 <+80>:\tmov    rax,QWORD PTR [r14+0x60]\n   0x0000000000090b78 <+84>:\tmov    rax,QWORD PTR [rax+0x6c0]\n   0x0000000000090b7f <+91>:\tcmp    rax,QWORD PTR [r15+0x3f]\n   0x0000000000090b83 <+95>:\tjne    0x90b95 <yinYang+113>\n   0x0000000000090b89 <+101>:\tmov    rdx,QWORD PTR [r15+0x867]\n   0x0000000000090b90 <+108>:\tcall   0x89b70 <stub _iso_stub_InitLateStaticFieldStub>\n   0x0000000000090b95 <+113>:\tmov    rax,QWORD PTR [r14+0x60]\n   0x0000000000090b99 <+117>:\tmov    rax,QWORD PTR [rax+0x7c8]\n   0x0000000000090ba0 <+124>:\tcmp    rax,QWORD PTR [r15+0x3f]\n   0x0000000000090ba4 <+128>:\tjne    0x90bb6 <yinYang+146>\n   0x0000000000090baa <+134>:\tmov    rdx,QWORD PTR [r15+0x86f]\n   0x0000000000090bb1 <+141>:\tcall   0x89b28 <stub _iso_stub_InitLateFinalStaticFieldStub>\n   0x0000000000090bb6 <+146>:\tmov    rax,QWORD PTR [r14+0x60]\n   0x0000000000090bba <+150>:\tmov    rax,QWORD PTR [rax+0x7d0]\n   0x0000000000090bc1 <+157>:\tcmp    rax,QWORD PTR [r15+0x3f]\n   0x0000000000090bc5 <+161>:\tjne    0x90bd7 <yinYang+179>\n   0x0000000000090bcb <+167>:\tmov    rdx,QWORD PTR [r15+0x1837]\n   0x0000000000090bd2 <+174>:\tcall   0x89b28 <stub _iso_stub_InitLateFinalStaticFieldStub>\n   0x0000000000090bd7 <+179>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x0000000000090bdb <+183>:\tmov    rsi,QWORD PTR [rbp-0x10]\n   0x0000000000090bdf <+187>:\tmov    QWORD PTR [rbp-0x18],rax\n   0x0000000000090be3 <+191>:\tcall   0x91160 <pixel>\n   0x0000000000090be8 <+196>:\tmov    rdi,QWORD PTR [rbp-0x18]\n   0x0000000000090bec <+200>:\tmov    rsi,rax\n   0x0000000000090bef <+203>:\tcall   0x90cb8 <_StdSink._write>\n   0x0000000000090bf4 <+208>:\tmov    rax,QWORD PTR [rbp-0x8]\n   0x0000000000090bf8 <+212>:\tadd    rax,0x1\n   0x0000000000090bfc <+216>:\tmov    rdi,rax\n   0x0000000000090bff <+219>:\tmov    rsi,QWORD PTR [rbp-0x10]\n   0x0000000000090c03 <+223>:\tjmp    0x90b5c <yinYang+56>\n   0x0000000000090c08 <+228>:\tmov    rax,QWORD PTR [r14+0x60]\n   0x0000000000090c0c <+232>:\tmov    rax,QWORD PTR [rax+0x6c0]\n   0x0000000000090c13 <+239>:\tcmp    rax,QWORD PTR [r15+0x3f]\n   0x0000000000090c17 <+243>:\tjne    0x90c29 <yinYang+261>\n   0x0000000000090c1d <+249>:\tmov    rdx,QWORD PTR [r15+0x867]\n   0x0000000000090c24 <+256>:\tcall   0x89b70 <stub _iso_stub_InitLateStaticFieldStub>\n   0x0000000000090c29 <+261>:\tmov    rax,QWORD PTR [r14+0x60]\n   0x0000000000090c2d <+265>:\tmov    rax,QWORD PTR [rax+0x7c8]\n   0x0000000000090c34 <+272>:\tcmp    rax,QWORD PTR [r15+0x3f]\n   0x0000000000090c38 <+276>:\tjne    0x90c4a <yinYang+294>\n   0x0000000000090c3e <+282>:\tmov    rdx,QWORD PTR [r15+0x86f]\n   0x0000000000090c45 <+289>:\tcall   0x89b28 <stub _iso_stub_InitLateFinalStaticFieldStub>\n   0x0000000000090c4a <+294>:\tmov    rax,QWORD PTR [r14+0x60]\n   0x0000000000090c4e <+298>:\tmov    rax,QWORD PTR [rax+0x7d0]\n   0x0000000000090c55 <+305>:\tcmp    rax,QWORD PTR [r15+0x3f]\n   0x0000000000090c59 <+309>:\tjne    0x90c6b <yinYang+327>\n   0x0000000000090c5f <+315>:\tmov    rdx,QWORD PTR [r15+0x1837]\n   0x0000000000090c66 <+322>:\tcall   0x89b28 <stub _iso_stub_InitLateFinalStaticFieldStub>\n   0x0000000000090c6b <+327>:\tmov    rdi,rax\n   0x0000000000090c6e <+330>:\tmov    rsi,QWORD PTR [r15+0x183f]\n   0x0000000000090c75 <+337>:\tcall   0x90cb8 <_StdSink._write>\n   0x0000000000090c7a <+342>:\tmov    rcx,QWORD PTR [rbp-0x10]\n   0x0000000000090c7e <+346>:\tadd    rcx,0x1\n   0x0000000000090c82 <+350>:\tmov    rsi,rcx\n   0x0000000000090c85 <+353>:\tjmp    0x90b3d <yinYang+25>\n   0x0000000000090c8a <+358>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x0000000000090c8e <+362>:\tmov    rsp,rbp\n   0x0000000000090c91 <+365>:\tpop    rbp\n   0x0000000000090c92 <+366>:\tret\n   0x0000000000090c93 <+367>:\tcall   QWORD PTR [r14+0x230]\n   0x0000000000090c9a <+374>:\tjmp    0x90b36 <yinYang+18>\n   0x0000000000090c9f <+379>:\tcall   QWORD PTR [r14+0x230]\n   0x0000000000090ca6 <+386>:\tjmp    0x90b4b <yinYang+39>\n   0x0000000000090cab <+391>:\tcall   QWORD PTR [r14+0x230]\n   0x0000000000090cb2 <+398>:\tjmp    0x90b6a <yinYang+70>\nEnd of assembler dump.\n"
    }
  ]
}