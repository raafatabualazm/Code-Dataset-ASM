{
  "file": "concurrent-computing-2.dart",
  "functions": [
    {
      "name": "main",
      "source": "main() {\n\t// Create ReceivePort to receive done messages\n\t// Called a channel in other languages\n\tvar receiver = ReceivePort();\n\n\t// Create job counter\n\tvar job_count = 3;\n\t\n\t// Create job pool\n\tvar jobs = [ enjoy, rosetta, code ];\n\n\t// Create random number generator\n\tvar rng = Random();\n\n\tfor ( var job in jobs ) {\n\t\t// Sleep for random duration up to half a second\n\t\tvar sleep_time = Duration( milliseconds: rng.nextInt( 500 ) );\t\n\n\t\t// Spawn  Isolate to do work\n\t\t// When finished the second argument will be sent to the receiver via the SendPort specified in onExit\n\t\tIsolate.spawn( job, sleep_time, onExit: receiver.sendPort );\n\n\t}\n\t\n\t// Do something in main isolate\n\tprint(\"from main isolate\\n\");\n\t\n\t// Register a listener on the ReceivePort, it gets called whenver something is sent on its SendPort\n\t// We'll ignore the message with _ because we don't care about the data, just the event\n\treceiver.listen( (_) {\n\t\t// Decrement job counter\n\t\tjob_count -= 1; \t\n\t\t// If jobs are all finished\n\t\tif ( job_count == 0 ) {\n\t\t\tprint(\"\\nall jobs finished!\");\n\t\t\texit(0);\n\t\t}\n\t});\n\n}",
      "assembly": "Dump of assembler code for function main:\n   0x00000000000a5c38 <+0>:\tpush   rbp\n   0x00000000000a5c39 <+1>:\tmov    rbp,rsp\n   0x00000000000a5c3c <+4>:\tsub    rsp,0x60\n   0x00000000000a5c40 <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x00000000000a5c44 <+12>:\tjbe    0xa5e41 <main+521>\n   0x00000000000a5c4a <+18>:\tmov    rdi,QWORD PTR [r14+0x70]\n   0x00000000000a5c4e <+22>:\tcall   0xa6a60 <new ReceivePort>\n   0x00000000000a5c53 <+27>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x00000000000a5c57 <+31>:\tmov    r10d,0x1\n   0x00000000000a5c5d <+37>:\tcall   0x97594 <stub _iso_stub_AllocateContextStub>\n   0x00000000000a5c62 <+42>:\tmov    QWORD PTR [rbp-0x10],rax\n   0x00000000000a5c66 <+46>:\tmov    QWORD PTR [rax+0x17],0x6\n   0x00000000000a5c6e <+54>:\tmov    rbx,QWORD PTR [r14+0x70]\n   0x00000000000a5c72 <+58>:\tmov    r10d,0x6\n   0x00000000000a5c78 <+64>:\tcall   0x984a4 <stub _iso_stub_AllocateArrayStub>\n   0x00000000000a5c7d <+69>:\tmov    QWORD PTR [rbp-0x18],rax\n   0x00000000000a5c81 <+73>:\tmov    r11,QWORD PTR [r15+0x1fbf]\n   0x00000000000a5c88 <+80>:\tmov    QWORD PTR [rax+0x17],r11\n   0x00000000000a5c8c <+84>:\tmov    r11,QWORD PTR [r15+0x1fc7]\n   0x00000000000a5c93 <+91>:\tmov    QWORD PTR [rax+0x1f],r11\n   0x00000000000a5c97 <+95>:\tmov    r11,QWORD PTR [r15+0x1fcf]\n   0x00000000000a5c9e <+102>:\tmov    QWORD PTR [rax+0x27],r11\n   0x00000000000a5ca2 <+106>:\tmov    rdi,QWORD PTR [r14+0x70]\n   0x00000000000a5ca6 <+110>:\tcall   0xa6850 <new Random>\n   0x00000000000a5cab <+115>:\tmov    rbx,rax\n   0x00000000000a5cae <+118>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x00000000000a5cb2 <+122>:\tmov    QWORD PTR [rbp-0x38],rbx\n   0x00000000000a5cb6 <+126>:\tmov    rax,QWORD PTR [rdi+0xf]\n   0x00000000000a5cba <+130>:\tmov    rsi,QWORD PTR [rax+0x7]\n   0x00000000000a5cbe <+134>:\tmov    QWORD PTR [rbp-0x30],rsi\n   0x00000000000a5cc2 <+138>:\txor    eax,eax\n   0x00000000000a5cc4 <+140>:\tmov    r8,QWORD PTR [rbp-0x18]\n   0x00000000000a5cc8 <+144>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x00000000000a5ccc <+148>:\tjbe    0xa5e4d <main+533>\n   0x00000000000a5cd2 <+154>:\tcmp    rax,0x3\n   0x00000000000a5cd6 <+158>:\tjge    0xa5e09 <main+465>\n   0x00000000000a5cdc <+164>:\tmov    r9,QWORD PTR [r8+rax*8+0x17]\n   0x00000000000a5ce1 <+169>:\tmov    QWORD PTR [rbp-0x28],r9\n   0x00000000000a5ce5 <+173>:\tmov    r10,rax\n   0x00000000000a5ce8 <+176>:\tadd    r10,0x1\n   0x00000000000a5cec <+180>:\tmov    QWORD PTR [rbp-0x20],r10\n   0x00000000000a5cf0 <+184>:\tcmp    r9,QWORD PTR [r14+0x70]\n   0x00000000000a5cf4 <+188>:\tjne    0xa5d18 <main+224>\n   0x00000000000a5cfa <+194>:\tmov    rax,r9\n   0x00000000000a5cfd <+197>:\tmov    rdx,QWORD PTR [r14+0x70]\n   0x00000000000a5d01 <+201>:\tmov    rcx,QWORD PTR [r14+0x70]\n   0x00000000000a5d05 <+205>:\tmov    rbx,QWORD PTR [r15+0x1fd7]\n   0x00000000000a5d0c <+212>:\tmov    r9,QWORD PTR [r15+0x1fdf]\n   0x00000000000a5d13 <+219>:\tcall   0x967d8 <stub _iso_stub_DefaultTypeTestStub>\n   0x00000000000a5d18 <+224>:\tmov    rcx,QWORD PTR [rbp-0x38]\n   0x00000000000a5d1c <+228>:\tmov    ebx,0x1f4\n   0x00000000000a5d21 <+233>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x00000000000a5d25 <+237>:\tjbe    0xa5e59 <main+545>\n   0x00000000000a5d2b <+243>:\tmov    rax,QWORD PTR [rcx+0x7]\n   0x00000000000a5d2f <+247>:\tmov    rdx,rax\n   0x00000000000a5d32 <+250>:\tmov    edx,edx\n   0x00000000000a5d34 <+252>:\tshr    rax,0x20\n   0x00000000000a5d38 <+256>:\tmov    edx,edx\n   0x00000000000a5d3a <+258>:\tmov    r11d,0xffffda61\n   0x00000000000a5d40 <+264>:\timul   rdx,r11\n   0x00000000000a5d44 <+268>:\tadd    rdx,rax\n   0x00000000000a5d47 <+271>:\tmov    QWORD PTR [rcx+0x7],rdx\n   0x00000000000a5d4b <+275>:\tmov    rsi,rdx\n   0x00000000000a5d4e <+278>:\tmov    esi,esi\n   0x00000000000a5d50 <+280>:\tmov    rax,rsi\n   0x00000000000a5d53 <+283>:\tmov    eax,eax\n   0x00000000000a5d55 <+285>:\tmov    r11,rax\n   0x00000000000a5d58 <+288>:\tmov    rax,QWORD PTR [r15+0xccf]\n   0x00000000000a5d5f <+295>:\timul   r11\n   0x00000000000a5d62 <+298>:\tsar    rdx,0x6\n   0x00000000000a5d66 <+302>:\tmov    rax,rdx\n   0x00000000000a5d69 <+305>:\tshr    rdx,0x3f\n   0x00000000000a5d6d <+309>:\tadd    rdx,rax\n   0x00000000000a5d70 <+312>:\tmov    rax,r11\n   0x00000000000a5d73 <+315>:\tmov    r11d,0x1f4\n   0x00000000000a5d79 <+321>:\timul   rdx,r11\n   0x00000000000a5d7d <+325>:\tsub    rax,rdx\n   0x00000000000a5d80 <+328>:\tjge    0xa5d89 <main+337>\n   0x00000000000a5d86 <+334>:\tadd    rax,r11\n   0x00000000000a5d89 <+337>:\tmov    rdx,rax\n   0x00000000000a5d8c <+340>:\tmov    esi,esi\n   0x00000000000a5d8e <+342>:\tsub    rsi,rdx\n   0x00000000000a5d91 <+345>:\tadd    rsi,0x1f4\n   0x00000000000a5d98 <+352>:\tmovabs r11,0x100000000\n   0x00000000000a5da2 <+362>:\tcmp    rsi,r11\n   0x00000000000a5da5 <+365>:\tjg     0xa5d21 <main+233>\n   0x00000000000a5dab <+371>:\timul   rdx,rdx,0x3e8\n   0x00000000000a5db2 <+378>:\tmov    QWORD PTR [rbp-0x40],rdx\n   0x00000000000a5db6 <+382>:\tcall   0xa6844 <new Duration>\n   0x00000000000a5dbb <+387>:\tmov    rcx,rax\n   0x00000000000a5dbe <+390>:\tmov    rax,QWORD PTR [rbp-0x40]\n   0x00000000000a5dc2 <+394>:\tmov    QWORD PTR [rcx+0x7],rax\n   0x00000000000a5dc6 <+398>:\tmov    r11,QWORD PTR [r15+0x1fef]\n   0x00000000000a5dcd <+405>:\tmov    QWORD PTR [rsp+0x18],r11\n   0x00000000000a5dd2 <+410>:\tmov    r11,QWORD PTR [rbp-0x28]\n   0x00000000000a5dd6 <+414>:\tmov    QWORD PTR [rsp+0x10],r11\n   0x00000000000a5ddb <+419>:\tmov    QWORD PTR [rsp+0x8],rcx\n   0x00000000000a5de0 <+424>:\tmov    r11,QWORD PTR [rbp-0x30]\n   0x00000000000a5de4 <+428>:\tmov    QWORD PTR [rsp],r11\n   0x00000000000a5de8 <+432>:\tmov    r10,QWORD PTR [r15+0x1bd7]\n   0x00000000000a5def <+439>:\tcall   0xa5ecc <Isolate.spawn>\n   0x00000000000a5df4 <+444>:\tmov    rax,QWORD PTR [rbp-0x20]\n   0x00000000000a5df8 <+448>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x00000000000a5dfc <+452>:\tmov    rbx,QWORD PTR [rbp-0x38]\n   0x00000000000a5e00 <+456>:\tmov    rsi,QWORD PTR [rbp-0x30]\n   0x00000000000a5e04 <+460>:\tjmp    0xa5cc4 <main+140>\n   0x00000000000a5e09 <+465>:\tmov    rdi,QWORD PTR [r15+0x1ff7]\n   0x00000000000a5e10 <+472>:\tcall   0xa5e68 <printToConsole>\n   0x00000000000a5e15 <+477>:\tmov    rdx,QWORD PTR [rbp-0x10]\n   0x00000000000a5e19 <+481>:\tmov    rbx,QWORD PTR [r15+0x1fff]\n   0x00000000000a5e20 <+488>:\tcall   0x978c0 <stub _iso_stub_AllocateClosureStub>\n   0x00000000000a5e25 <+493>:\tmov    rdi,QWORD PTR [rbp-0x8]\n   0x00000000000a5e29 <+497>:\tmov    rsi,rax\n   0x00000000000a5e2c <+500>:\tmov    r10,QWORD PTR [r15+0xd7]\n   0x00000000000a5e33 <+507>:\tcall   0x91384 <_ReceivePortImpl.listen>\n   0x00000000000a5e38 <+512>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x00000000000a5e3c <+516>:\tmov    rsp,rbp\n   0x00000000000a5e3f <+519>:\tpop    rbp\n   0x00000000000a5e40 <+520>:\tret\n   0x00000000000a5e41 <+521>:\tcall   QWORD PTR [r14+0x230]\n   0x00000000000a5e48 <+528>:\tjmp    0xa5c4a <main+18>\n   0x00000000000a5e4d <+533>:\tcall   QWORD PTR [r14+0x230]\n   0x00000000000a5e54 <+540>:\tjmp    0xa5cd2 <main+154>\n   0x00000000000a5e59 <+545>:\tcall   QWORD PTR [r14+0x230]\n   0x00000000000a5e60 <+552>:\tjmp    0xa5d2b <main+243>\nEnd of assembler dump.\n"
    },
    {
      "name": "enjoy",
      "source": "enjoy ( duration ) {\n\tsleep( duration ) ;\n\tprint(\"Enjoy\");\n}",
      "assembly": "Dump of assembler code for function enjoy:\n   0x00000000000a6fa0 <+0>:\tpush   rbp\n   0x00000000000a6fa1 <+1>:\tmov    rbp,rsp\n   0x00000000000a6fa4 <+4>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x00000000000a6fa8 <+8>:\tjbe    0xa6fbc <enjoy+28>\n   0x00000000000a6fae <+14>:\tmov    rdi,QWORD PTR [rbp+0x10]\n   0x00000000000a6fb2 <+18>:\tcall   0xa6fc8 <enjoy>\n   0x00000000000a6fb7 <+23>:\tmov    rsp,rbp\n   0x00000000000a6fba <+26>:\tpop    rbp\n   0x00000000000a6fbb <+27>:\tret\n   0x00000000000a6fbc <+28>:\tcall   QWORD PTR [r14+0x230]\n   0x00000000000a6fc3 <+35>:\tjmp    0xa6fae <enjoy+14>\nEnd of assembler dump.\n"
    },
    {
      "name": "rosetta",
      "source": "rosetta ( duration ) {\n\tsleep( duration );\n\tprint(\"Rosetta\");\n }",
      "assembly": "Dump of assembler code for function rosetta:\n   0x00000000000a6efc <+0>:\tpush   rbp\n   0x00000000000a6efd <+1>:\tmov    rbp,rsp\n   0x00000000000a6f00 <+4>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x00000000000a6f04 <+8>:\tjbe    0xa6f18 <rosetta+28>\n   0x00000000000a6f0a <+14>:\tmov    rdi,QWORD PTR [rbp+0x10]\n   0x00000000000a6f0e <+18>:\tcall   0xa6f24 <rosetta>\n   0x00000000000a6f13 <+23>:\tmov    rsp,rbp\n   0x00000000000a6f16 <+26>:\tpop    rbp\n   0x00000000000a6f17 <+27>:\tret\n   0x00000000000a6f18 <+28>:\tcall   QWORD PTR [r14+0x230]\n   0x00000000000a6f1f <+35>:\tjmp    0xa6f0a <rosetta+14>\nEnd of assembler dump.\n"
    }
  ]
}