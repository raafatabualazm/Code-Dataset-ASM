{
  "file": "rot-13.dart",
  "functions": [
    {
      "name": "rot13char",
      "source": "String rot13char(int charCode) {\n  if ((charCode >= 'A'.codeUnitAt(0) && charCode <= 'M'.codeUnitAt(0)) ||\n      (charCode >= 'a'.codeUnitAt(0) && charCode <= 'm'.codeUnitAt(0))) {\n    return String.fromCharCode(charCode + 13);\n  } else if ((charCode >= 'N'.codeUnitAt(0) && charCode <= 'Z'.codeUnitAt(0)) ||\n             (charCode >= 'n'.codeUnitAt(0) && charCode <= 'z'.codeUnitAt(0))) {\n    return String.fromCharCode(charCode - 13);\n  } else {\n    return String.fromCharCode(charCode);\n  }\n}",
      "assembly": "Dump of assembler code for function rot13char:\n   0x000000000008ae44 <+0>:\tpush   rbp\n   0x000000000008ae45 <+1>:\tmov    rbp,rsp\n   0x000000000008ae48 <+4>:\tmov    rsi,rdi\n   0x000000000008ae4b <+7>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008ae4f <+11>:\tjbe    0x8aed7 <rot13char+147>\n   0x000000000008ae55 <+17>:\tcmp    rsi,0x41\n   0x000000000008ae59 <+21>:\tjl     0x8ae69 <rot13char+37>\n   0x000000000008ae5f <+27>:\tcmp    rsi,0x4d\n   0x000000000008ae63 <+31>:\tjle    0x8ae7d <rot13char+57>\n   0x000000000008ae69 <+37>:\tcmp    rsi,0x61\n   0x000000000008ae6d <+41>:\tjl     0x8ae8f <rot13char+75>\n   0x000000000008ae73 <+47>:\tcmp    rsi,0x6d\n   0x000000000008ae77 <+51>:\tjg     0x8ae8f <rot13char+75>\n   0x000000000008ae7d <+57>:\tadd    rsi,0xd\n   0x000000000008ae81 <+61>:\tmov    rdi,QWORD PTR [r14+0x70]\n   0x000000000008ae85 <+65>:\tcall   0x5ded0 <new String.fromCharCode>\n   0x000000000008ae8a <+70>:\tmov    rsp,rbp\n   0x000000000008ae8d <+73>:\tpop    rbp\n   0x000000000008ae8e <+74>:\tret\n   0x000000000008ae8f <+75>:\tcmp    rsi,0x4e\n   0x000000000008ae93 <+79>:\tjl     0x8aea3 <rot13char+95>\n   0x000000000008ae99 <+85>:\tcmp    rsi,0x5a\n   0x000000000008ae9d <+89>:\tjle    0x8aeb7 <rot13char+115>\n   0x000000000008aea3 <+95>:\tcmp    rsi,0x6e\n   0x000000000008aea7 <+99>:\tjl     0x8aec9 <rot13char+133>\n   0x000000000008aead <+105>:\tcmp    rsi,0x7a\n   0x000000000008aeb1 <+109>:\tjg     0x8aec9 <rot13char+133>\n   0x000000000008aeb7 <+115>:\tsub    rsi,0xd\n   0x000000000008aebb <+119>:\tmov    rdi,QWORD PTR [r14+0x70]\n   0x000000000008aebf <+123>:\tcall   0x5ded0 <new String.fromCharCode>\n   0x000000000008aec4 <+128>:\tmov    rsp,rbp\n   0x000000000008aec7 <+131>:\tpop    rbp\n   0x000000000008aec8 <+132>:\tret\n   0x000000000008aec9 <+133>:\tmov    rdi,QWORD PTR [r14+0x70]\n   0x000000000008aecd <+137>:\tcall   0x5ded0 <new String.fromCharCode>\n   0x000000000008aed2 <+142>:\tmov    rsp,rbp\n   0x000000000008aed5 <+145>:\tpop    rbp\n   0x000000000008aed6 <+146>:\tret\n   0x000000000008aed7 <+147>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008aede <+154>:\tjmp    0x8ae55 <rot13char+17>\nEnd of assembler dump.\n"
    },
    {
      "name": "rot13",
      "source": "String rot13(String str) {\n  return String.fromCharCodes(str.runes.map((rune) {\n    return rot13char(rune).codeUnitAt(0);\n  }));\n}",
      "assembly": "Dump of assembler code for function rot13:\n   0x000000000008ac78 <+0>:\tpush   rbp\n   0x000000000008ac79 <+1>:\tmov    rbp,rsp\n   0x000000000008ac7c <+4>:\tsub    rsp,0x20\n   0x000000000008ac80 <+8>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008ac84 <+12>:\tjbe    0x8acdf <rot13+103>\n   0x000000000008ac8a <+18>:\tmov    rdi,QWORD PTR [r15+0x184f]\n   0x000000000008ac91 <+25>:\tcall   0x8ad98 <_StringBase.runes>\n   0x000000000008ac96 <+30>:\tmov    rbx,QWORD PTR [r15+0x1857]\n   0x000000000008ac9d <+37>:\tmov    rdx,QWORD PTR [r14+0x70]\n   0x000000000008aca1 <+41>:\tmov    QWORD PTR [rbp-0x8],rax\n   0x000000000008aca5 <+45>:\tcall   0x84ae0 <stub _iso_stub_AllocateClosureStub>\n   0x000000000008acaa <+50>:\tmov    r11,QWORD PTR [r15+0x237]\n   0x000000000008acb1 <+57>:\tmov    QWORD PTR [rsp+0x10],r11\n   0x000000000008acb6 <+62>:\tmov    r11,QWORD PTR [rbp-0x8]\n   0x000000000008acba <+66>:\tmov    QWORD PTR [rsp+0x8],r11\n   0x000000000008acbf <+71>:\tmov    QWORD PTR [rsp],rax\n   0x000000000008acc3 <+75>:\tmov    r10,QWORD PTR [r15+0x57]\n   0x000000000008acc7 <+79>:\tcall   0x8ace8 <Iterable.map>\n   0x000000000008accc <+84>:\tmov    rdi,rax\n   0x000000000008accf <+87>:\txor    esi,esi\n   0x000000000008acd1 <+89>:\tmov    rdx,QWORD PTR [r14+0x70]\n   0x000000000008acd5 <+93>:\tcall   0x5d024 <_StringBase.createFromCharCodes>\n   0x000000000008acda <+98>:\tmov    rsp,rbp\n   0x000000000008acdd <+101>:\tpop    rbp\n   0x000000000008acde <+102>:\tret\n   0x000000000008acdf <+103>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008ace6 <+110>:\tjmp    0x8ac8a <rot13+18>\nEnd of assembler dump.\n"
    },
    {
      "name": "main",
      "source": "void main() {\n  print(rot13(\"The quick brown fox jumps over the lazy dog\"));\n}",
      "assembly": "Dump of assembler code for function main:\n   0x000000000008abac <+0>:\tpush   rbp\n   0x000000000008abad <+1>:\tmov    rbp,rsp\n   0x000000000008abb0 <+4>:\tcmp    rsp,QWORD PTR [r14+0x38]\n   0x000000000008abb4 <+8>:\tjbe    0x8abd0 <main+36>\n   0x000000000008abba <+14>:\tcall   0x8ac78 <rot13>\n   0x000000000008abbf <+19>:\tmov    rdi,rax\n   0x000000000008abc2 <+22>:\tcall   0x8abdc <print>\n   0x000000000008abc7 <+27>:\tmov    rax,QWORD PTR [r14+0x70]\n   0x000000000008abcb <+31>:\tmov    rsp,rbp\n   0x000000000008abce <+34>:\tpop    rbp\n   0x000000000008abcf <+35>:\tret\n   0x000000000008abd0 <+36>:\tcall   QWORD PTR [r14+0x230]\n   0x000000000008abd7 <+43>:\tjmp    0x8abba <main+14>\nEnd of assembler dump.\n"
    }
  ]
}